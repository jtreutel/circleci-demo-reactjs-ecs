orbs:
  aws-ecs: circleci/aws-ecs@1.4.0
  terraform: circleci/terraform@1.2.0
  aws-ecr: circleci/aws-ecr@6.15.2
  node: circleci/node@4.0.0

version: 2.1

jobs:
  checkout-code:
    docker:
      - image: cimg/base:2021.01 
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  node-static-analysis:
    docker:
      - image: cimg/node:15.6.0
    steps:
      - attach_workspace:
          at: .
      - run: |
          npm install eslint eslint-plugin-react 
          node_modules/eslint/bin/eslint.js ./src/
  terraform-format-check:
    docker:
      - image: cimg/base:2021.01 
    steps:
      - attach_workspace:
          at: .
      - terraform/install:  
          terraform_version: 0.14.5
      - terraform/fmt:  
          path: ./tf/infra
      - terraform/fmt:  
          path: ./tf/route53
  terraform-validate-and-plan:
    docker:
      - image: cimg/base:2021.01 
    steps:
      - attach_workspace:
          at: .
      - terraform/install:  
          terraform_version: 0.14.5
      - terraform/validate:  
          path: ./tf/infra
      - terraform/validate:  
          path: ./tf/route53
      - terraform/plan:
          path: ./tf/infra
          var: 'aws_resource_name_prefix=${AWS_RESOURCE_NAME_PREFIX},commit_hash=${CIRCLE_SHA1},vpc_id=${VPC_ID},subnet_id_a=${SUBNET_ID_A},subnet_id_b=${SUBNET_ID_B},ecs_key_pair_name=${ECS_KEY_PAIR_NAME}'
  build-image-and-push-to-ecr:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - aws-ecr/build-and-push-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}-ecr"
          tag: "${CIRCLE_SHA1}"
          create-repo: false
  terraform-apply-infra:
    docker:
      - image: cimg/base:2021.01 
    steps:
      - attach_workspace:
          at: .
      - terraform/install:  
          terraform_version: 0.14.5
      - terraform/init:
          path: ./tf/infra
      - terraform/apply:
          path: ./tf/infra
          var: 'aws_resource_name_prefix=${AWS_RESOURCE_NAME_PREFIX},commit_hash=${CIRCLE_SHA1},vpc_id=${VPC_ID},subnet_id_a=${SUBNET_ID_A},subnet_id_b=${SUBNET_ID_B},ecs_key_pair_name=${ECS_KEY_PAIR_NAME}'
  terraform-apply-dns:
    docker:
      - image: cimg/base:2021.01 
    steps:
      - attach_workspace:
          at: .
      - terraform/install:  
          terraform_version: 0.14.5
      - terraform/init:
          path: ./tf/route53
      - terraform/apply:
          path: ./tf/route53
          var: 'dns_domain=${DNS_DOMAIN}'
  build-image-only:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - aws-ecr/build-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}-ecr"
          tag: "${CIRCLE_SHA1}"
          skip-when-tags-exist: false



workflows:
  version: 2
  test-and-deploy:
    jobs:
      - checkout-code
      - terraform-format-check:
          requires:
            - checkout-code
      - terraform-validate-and-plan:
          context: node-demo
          requires:
            - checkout-code
      - node/test:
          requires:
            - checkout-code
          post-steps:
            - save_cache:
                key: v1-node-deps
                paths:
                  - ./node_modules
            - store_test_results:
                path: ./test-results
            - store_artifacts:
                path: ./test-results/junit.xml
      - node-static-analysis:
          requires:
            - checkout-code
      - build-image-and-push-to-ecr:
          context: node-demo
          pre-steps:
            - restore_cache:
                key: v1-node-deps
          requires:
            - node/test
            - node-static-analysis
            - terraform-validate-and-plan
      - manual-approval:
          type: approval
          requires:
            - build-image-and-push-to-ecr
      - terraform-apply-infra:
          context: node-demo
          requires:
            - manual-approval
      - aws-ecs/deploy-service-update:
          context: node-demo
          requires:
            - terraform-apply-infra
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"
      - terraform-apply-dns:
          context: node-demo
          requires:
            - aws-ecs/deploy-service-update
  nightly_build:
    jobs:
      - build-image-only
    triggers:
      - schedule:
          cron: "0 0 * * 1,2,3,4,5" #run at 00:00 M-F
          filters:
            branches: 
              only: master